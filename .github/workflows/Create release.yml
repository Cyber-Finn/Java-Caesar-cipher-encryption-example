# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Create release .exe

on:
  push:
    branches: [ "release" ]
    tags:
      - v* # Match tags starting with 'v'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write


    steps:
    - uses: actions/checkout@v4

    #commenting out to test alt way of building arti
    # create an exe/artifact for our app (regardless of language type)
    #- name: Upload artifact
     # uses: actions/upload-artifact@v2
     # with:
      #    name: Java-Caesar-Cipher-Example
       #   path: Java-Caesar-cipher-encryption-example/  # Remember to adjust the path based on our project structure (Just saving to the root here)



    # start of Java stuff    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Configure Gradle for optimal use in GiHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    #- name: Setup Gradle
    #  uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
    #  
    # - name: Build with Gradle Wrapper
    #  run: ./gradlew build

    # NOTE: The Gradle Wrapper is the default and recommended way to run Gradle (https://docs.gradle.org/current/userguide/gradle_wrapper.html).
    # If your project does not have the Gradle Wrapper configured, you can use the following configuration to run Gradle with a specified version.
    #
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
      with:
         gradle-version: '8.5'
    
    - name: Build with Gradle 8.5 #basically useless for me right now
      run: gradle build

    - name: Compile Java .exe
      run: javac CaesarCipher.java  # Compile the Java source code

    # end of default Gradle Wrapper
    
  dependency-submission:

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Generates and submits a dependency graph, enabling Dependabot Alerts for all project dependencies.
    # See: https://github.com/gradle/actions/blob/main/dependency-submission/README.md
    - name: Generate and submit dependency graph
      uses: gradle/actions/dependency-submission@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
      with:
         gradle-version: '8.5'
         

  release:
    name: Release pushed tag
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    
    steps:

      # experimental stuff
      - name: Upload .exe file
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} #github autogenerated key that allows your workflow to perform actions on behalf of the GitHub repository where the workflow is running 
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./
          asset_name: CaesarCipher.java  # Specify the name we gave up above in the "Upload artifact" job
          asset_content_type: application/octet-stream

      # end of experimental stuff
    
      - name: Create release
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} #github autogenerated key that allows your workflow to perform actions on behalf of the GitHub repository where the workflow is running 
          #TAG: ${{ github.ref_name }}
          TAG: "v${{ github.run_number }}" # run number is as close as we'll get to having incremental tagging, without using obscure 3rd party libs
        run: |
          gh release create "$TAG" \
            --repo="$GITHUB_REPOSITORY" \
            --title="${GITHUB_REPOSITORY#*/} ${TAG#v}" \
            --generate-notes
      
